diff --git a/main.cpp b/main.cpp
index 32dfc67..e94fa9c 100644
--- a/main.cpp
+++ b/main.cpp
@@ -23,7 +23,17 @@ static bool run(std::string&& line, int64_t count) {
     } else if ((ret = miniscript::FromString(Expand(line), COMPILER_CTX))) {
         auto ms = ret->ToString(COMPILER_CTX);
         assert(ms);
-        printf("%7li scriptlen=%i maxops=%i type=%s safe=%s nonmal=%s dissat=%s input=%s output=%s timelock_mix=%s miniscript=%s\n", (long)count, (int)ret->ScriptSize(), (int)ret->GetOps(), ret->GetType() << "B"_mst ? "B" : ret->GetType() << "V"_mst ? "V" : ret->GetType() << "W"_mst ? "W" : ret->GetType() << "K"_mst ? "K" : "(invalid)", ret->GetType() << "s"_mst ? "yes" : "no", ret->GetType() << "m"_mst ? "yes" : "no", ret->GetType() << "f"_mst ? "no" : ret->GetType() << "e"_mst ? "unique" : ret->GetType() << "d"_mst ? "yes" : "unknown", ret->GetType() << "z"_mst ? "0" : ret->GetType() << "o"_mst ? (ret->GetType() << "n"_mst ? "1n" : "1") : ret->GetType() << "n"_mst ? "n" : "-", ret->GetType() << "u"_mst ? "1" : "nonzero", ret->GetType() << "k"_mst ? "no": "yes", Abbreviate(*ms).c_str());
+        printf("%7li scriptlen=%i maxops=%i type=%s safe=%s nonmal=%s dissat=%s input=%s output=%s timelock_mix=%s\n miniscript=%s\n", 
+				(long)count, 
+				(int)ret->ScriptSize(), 
+				(int)ret->GetOps(), 
+				ret->GetType() << "B"_mst ? "B" : ret->GetType() << "V"_mst ? "V" : ret->GetType() << "W"_mst ? "W" : ret->GetType() << "K"_mst ? "K" : "(invalid)", 
+				ret->GetType() << "s"_mst ? "yes" : "no", 
+				ret->GetType() << "m"_mst ? "yes" : "no", 
+				ret->GetType() << "f"_mst ? "no" : ret->GetType() << "e"_mst ? "unique" : ret->GetType() << "d"_mst ? "yes" : "unknown", 
+				ret->GetType() << "z"_mst ? "0" : ret->GetType() << "o"_mst ? (ret->GetType() << "n"_mst ? "1n" : "1") : ret->GetType() << "n"_mst ? "n" : "-", 
+				ret->GetType() << "u"_mst ? "1" : "nonzero", ret->GetType() << "k"_mst ? "no": "yes",
+				Abbreviate(*ms).c_str());
     } else {
         printf("Failed to parse as policy or miniscript '%s'\n", line.c_str());
     }
@@ -33,8 +43,10 @@ static bool run(std::string&& line, int64_t count) {
 int main(void) {
     int64_t count = 0;
     do {
+        // printf("start:test\n");
         std::string line;
         std::getline(std::cin, line);
-        if (!run(std::move(line), count++)) break;
-    } while(true);
+        // printf("loop:test\n");
+        if (!run(std::move(line), count++)) { /* printf("end:test\n");*/ break; }
+	} while(true);
 }
